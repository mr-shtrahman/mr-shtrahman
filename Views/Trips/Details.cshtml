
<link rel="stylesheet" href="~/css/trip.css">
<link rel="stylesheet" href="~/css/general.css">
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="https://d3js.org/d3.v5.min.js" type="text/javascript"></script>

@model mr_shtrahman.Models.Trip

@{
    ViewData["Title"] = "Details";
}

<div class="specific-header">
    <img src="@ViewBag.Image.Src.Substring(1)" />
    <h1>@Html.DisplayFor(model => model.Name)</h1>
    <a asp-action="Index">Go Back</a>
</div>
<div class="container">
    <div class="data-section">
        <h6>A LITTLE ABOUT THIS TRIP</h6>
        <p>
            @Html.DisplayFor(model => model.Details)
        </p>
    </div>
    <div class="data-section row">
        <div id="weather_graph" class="col graph">
            <h6>WEATHER STATS</h6>
            <div id="error_message"></div>
        </div>
        <div id="busy_hours" class="col graph">
            <h6>BUSY HOURS</h6>
        </div>
    </div>
    <div class="data-section">
        <h6>OUR RECOMMENDATIONS</h6>
        <div class="product-section">
            <div class="card-body products-container row">
                @foreach (var product in ViewBag.ProductImages)
                {
                <div class="relevant-product col-sm-4">
                    <img src="@product.Value.Src.Substring(1)" />
                    <div class="product-name">@product.Key.Name</div>
                </div>
                }
            </div>
        </div>
    </div>
</div>

<script type="text/javascript" language="javascript">
    // GET weather for current location from api
    $.ajax({
        type: "GET",
        url: "https://dataservice.accuweather.com/locations/v1/cities/geoposition/search?apikey=UG9eCATbiOuFKCnsXSG1hv9gBx3qytKF&details=false&q=@this.Model.Lat,@this.Model.Lon",
        dataType: "json",
        success: function (result) {
            $.ajax({
                type: "GET",
                url: "https://dataservice.accuweather.com/forecasts/v1/daily/5day/" + result.Key,
                data: {
                    "apikey": "UG9eCATbiOuFKCnsXSG1hv9gBx3qytKF",
                    "metric": "true"
                },
                dataType: "json",
                success: function (result) {
                    var weatherStats = result.DailyForecasts.map(x => {
                        var dateObj = new Date(x.Date);
                        var dateMonth = dateObj.getUTCMonth() + 1;
                        var dateDay = dateObj.getUTCDate();

                        return { "Date": dateDay + "/" + dateMonth, "Temperature": x.Temperature.Maximum.Value };
                    });
                    drawWeatherBar(weatherStats);
                },
                error: function (msg) {
                    document.getElementById('error_message').innerHTML = "OOPS! Can't load weather for this trip";
                }
            });
        },
        error: function (msg) {
            document.getElementById('error_message').innerHTML = "OOPS! Can't load weather for this trip";
        }
    });

    // GET busy hours from api
    $.ajax({
        type: "GET",
        url: "/VisitorsAttendances/Busy/@this.Model.Id",
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (result) {
            var busyHours = result.map(x => {
                var dateObj = new Date(x.date);
                var dateMonth = dateObj.getUTCMonth() + 1;
                var dateDay = dateObj.getUTCDate();

                return { "Date": dateDay + "/" + dateMonth, "Count": x.attendance };
            });
            drawBusyHourScatter(busyHours);
        },
        error: function (msg) {
            alert("שגיאה בשירות עומס טיולים");
        }
    });

    function drawBusyHourScatter(jsonData) {
        var margin = { top: 20, right: 20, bottom: 30, left: 40 },
            width = 400 - margin.left - margin.right,
            height = 300 - margin.top - margin.bottom;

        // set the ranges
        var x = d3.scaleBand()
            .range([0, width])
            .padding(0.1);
        var y = d3.scaleLinear()
            .range([height, 0]);

        // get some color in
        var color = d3.schemeCategory10;

        // append the svg object to the body of the page
        // append a 'group' element to 'svg'
        // moves the 'group' element to the top left margin
        var svg = d3.select("#busy_hours").append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform",
                "translate(" + margin.left + "," + margin.top + ")");

        // Scale the range of the data in the domains
        x.domain(jsonData.map(function (d) { return d.Date; }));
        y.domain([d3.min(jsonData.map(function (d) { return d.Count; })) * 0.8, d3.max(jsonData.map(function (d) { return d.Count; })) * 1.2]);

        // append the rectangles for the bar chart
        var bars = svg.selectAll("#busy_hours")
            .data(jsonData)
            .enter().append("rect")
            .attr("class", "bar")
            .attr("x", function (d) { return x(d.Date); })
            .attr("width", x.bandwidth())
            .attr("y", function (d) { return y(d.Count); })
            .attr("height", function (d) { return height - y(d.Count); })
            .attr('fill', function (d, i) { return color[i]; });

        // add the x Axis
        svg.append("g")
            .attr("transform", "translate(0," + height + ")")
            .call(d3.axisBottom(x));

        // add the y Axis
        svg.append("g")
            .call(d3.axisLeft(y))
            .append("text")
            .attr("transform", "rotate(-90)")
            .attr("y", 6)
            .attr("dy", "-35px")
            .text("Calories");
    }

    function drawWeatherBar(jsonData) {
        var margin = { top: 20, right: 20, bottom: 30, left: 40 },
            width = 400 - margin.left - margin.right,
            height = 300 - margin.top - margin.bottom;

        // set the ranges
        var x = d3.scaleBand()
            .range([0, width])
            .padding(0.1);
        var y = d3.scaleLinear()
                .range([height, 0]);

        // get some color in
        var color = d3.schemeCategory10;

        // append the svg object to the body of the page
        // append a 'group' element to 'svg'
        // moves the 'group' element to the top left margin
        var svg = d3.select("#weather_graph").append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform",
                "translate(" + margin.left + "," + margin.top + ")");

        // Scale the range of the data in the domains
        x.domain(jsonData.map(function (d) { return d.Date; }));
        y.domain([d3.min(jsonData.map(function (d) { return d.Temperature; })) * 0.8, d3.max(jsonData.map(function (d) { return d.Temperature; })) * 1.1]);

        // append the rectangles for the bar chart
        var bars = svg.selectAll("#weather_graph")
            .data(jsonData)
            .enter().append("rect")
            .attr("class", "bar")
            .attr("x", function (d) { return x(d.Date); })
            .attr("width", x.bandwidth())
            .attr("y", function (d) { return y(d.Temperature); })
            .attr("height", function (d) { return height - y(d.Temperature); })
            .attr('fill', function (d, i) { return color[i]; });

        // add the x Axis
        svg.append("g")
            .attr("transform", "translate(0," + height + ")")
            .call(d3.axisBottom(x));

        // add the y Axis
        svg.append("g")
            .call(d3.axisLeft(y))
            .append("text")
            .attr("transform", "rotate(-90)")
            .attr("y", 6)
            .attr("dy", "-35px")
            .text("Calories");
    }
</script>
